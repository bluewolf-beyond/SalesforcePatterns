[[!taglink  AntiPattern]]

# Monolithic Service Class

**Context**:

 * developing operations on groups of sObjects

**Forces**:

 * [[FlatFileStructure]] encourages minimizing file count
 * all team members need to understand system architecture
 * grouping functionality by sObject type simplifies architecture
 * global methods are easy to invoke

**Supposed Solution**:

 * make one service class per sObject type.  make all operations on this type static methods on the service class.

**Resulting Context**:

Many disparate projects put methods into a single class.  It becomes difficult to tell which functionality is related to others in the [[BigBallOfMud]].

Cohesive functionality related to a single project is spread over many files. It becomes difficult to follow the thread of execution through the [[SpaghettiCode]].

**Related AntiPatterns**:

 * [[StaticMethodAbuse]]

**Applicable Positive Patterns**:

 * [[AggregatePattern]]
 * [[ShearingLayers]]
