[[!taglink  AntiPattern]]

# Monolithic Service Class

### Context

 * operations on groups of sObjects

### Forces

 * [[FlatFileStructure]] encourages minimizing file count
 * all team members need to quickly understand system architecture
 * grouping functionality by sObject type simplifies architecture
 * global methods are easy to invoke

### Supposed Solution

 * make one service class per sObject type.  make all operations on this type static methods on the service class.

### Resulting Context

Many disparate projects put methods into a single class.  It becomes difficult to tell which functionality is related to others in the [[BigBallOfMud]].

Cohesive functionality related to a single project is spread over many files. It becomes difficult to follow the thread of execution through the [[SpaghettiCode]].

Functional code becomes littered with special-case logic, increasing the complexity of the codebase.

### Related AntiPatterns

 * [[StaticMethodAbuse]]

### Applicable Positive Patterns

 * [[Aggregate]]
 * [[Iterator]]
 * [[ShearingLayer]]
 * [[TemplateMethod]]

### Special Case of

 * [[Singleton]]
